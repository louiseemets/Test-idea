def print_board(board):
    print("\n  1 | 2 | 3 ")
    print(" -----------")
    print(f"1 {board[0][0]} | {board[0][1]} | {board[0][2]}")
    print(" -----------")
    print(f"2 {board[1][0]} | {board[1][1]} | {board[1][2]}")
    print(" -----------")
    print(f"3 {board[2][0]} | {board[2][1]} | {board[2][2]}\n")

def display_instructions():
    print("Welcome to Tic-Tac-Toe!")
    print("Player 1: X   Player 2: O")
    print("The game board is a 3x3 grid.")
    print("Players take turns to place their marker on the board.")
    print("The first player to get 3 of their markers in a row (horizontally, vertically, or diagonally) wins!")
    print("Let's start!\n")

def choose_markers():
    marker1 = input("Player 1, choose your marker (X or O): ").upper()
    while marker1 not in ["X", "O"]:
        marker1 = input("Invalid marker. Please choose X or O: ").upper()
    marker2 = "X" if marker1 == "O" else "O"
    return marker1, marker2

def get_player_move(board):
    while True:
        try:
            move = input("Enter your move (row and column, e.g., '1 2'): ")
            row, col = map(int, move.split())
            if 1 <= row <= 3 and 1 <= col <= 3:
                if board[row - 1][col - 1] == " ":
                    return row - 1, col - 1
                else:
                    print("That space is already taken. Try again.")
            else:
                print("Invalid input. Enter numbers between 1 and 3.")
        except ValueError:
            print("Invalid input. Enter two numbers separated by space.")

def announce_winner(player):
    print(f"Player {player} wins!")

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def play_game():
    display_instructions()
    marker1, marker2 = choose_markers()
    players = {0: marker1, 1: marker2}
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = 0

    while True:
        print_board(board)
        print(f"Player {current_player + 1}'s turn ({players[current_player]}):")

        row, col = get_player_move(board)
        board[row][col] = players[current_player]

        if check_winner(board, players[current_player]):
            print_board(board)
            announce_winner(current_player + 1)
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    play_game()
