def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def get_player_move():
    while True:
        try:
            move = int(input("Enter your move (1-9): "))
            if 1 <= move <= 9:
                return divmod(move - 1, 3)  # Convert move to (row, col)
            else:
                print("Invalid input. Enter a number between 1 and 9.")
        except ValueError:
            print("Invalid input. Enter a number.")

def play_again():
    return input("Do you want to play again? (yes/no): ").lower().startswith('y')

def main():
    while True:
        board = [[" " for _ in range(3)] for _ in range(3)]
        players = ["X", "O"]
        current_player = 0

        while True:
            print_board(board)
            print(f"Player {players[current_player]}'s turn:")

            row, col = get_player_move()

            if board[row][col] == " ":
                board[row][col] = players[current_player]

                if check_winner(board, players[current_player]):
                    print_board(board)
                    print(f"Player {players[current_player]} wins!")
                    break
                elif is_board_full(board):
                    print_board(board)
                    print("It's a tie!")
                    break

                current_player = (current_player + 1) % 2
            else:
                print("Invalid move. That space is already taken. Try again.")

        if not play_again():
            break



